// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Branch {
  id        Int      @id @default(autoincrement())
  name      String @unique
  address   String
  pincode Int
  city String
  state String
  country String
  picture   String? // URL or path to branch picture
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  manager  FranchiseManager?
  staff    Staff[]
  bookings Booking[]
  products Product[]
}

model FranchiseManager {
  id          Int      @id @default(autoincrement())
  name        String?
  email       String   @unique
  username String @unique
  password    String
  phoneNumber String?
  picture     String? // URL or path to manager picture
  passwordKey String @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  branchId Int?    @unique
  branch   Branch? @relation(fields: [branchId], references: [id])
}

model Staff {
  id          Int      @id @default(autoincrement())
  name        String?
  phoneNumber String?   @unique
  email       String?   @unique
  username String @unique
  password    String
  picture     String? // URL or path to staff picture
  passwordKey String @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  branchId Int
  branch   Branch    @relation(fields: [branchId], references: [id])
  bookings Booking[]
}

model Product {
  id        Int      @id @default(autoincrement())
  name      String
  price     Float
  duration  Int?
  picture   String? // URL or path to product picture
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  branchId Int
  branch   Branch    @relation(fields: [branchId], references: [id])
  bookings Booking[]
}

model Booking {
  id        Int           @id @default(autoincrement())
  date      DateTime
  startTime Int?
  endTime   Int?
  delivery  DateTime?
  status    BookingStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  userId Int
  user   User @relation(fields: [userId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  branchId Int
  branch   Branch @relation(fields: [branchId], references: [id])

  staffId Int?
  staff   Staff? @relation(fields: [staffId], references: [id])
}

model User {
  id          Int      @id @default(autoincrement())
  phoneNumber String   @unique
  waChatId    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bookings Booking[]
}

model SuperAdmin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  picture   String? // URL or path to superadmin picture
  passwordKey String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}
